import json
import os
from datetime import datetime, timedelta
from typing import List
from urllib import request

from flask import jsonify

from app import create_app
from app.bot.main import root_dir
from app.models.models import NewsPost, PostComment, NewsSource


def filter_news_by_time_db(db, NewsPost, hours: int):
	"""–§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
	try:
		time_threshold = datetime.now() - timedelta(hours=hours)
		filtered_news = NewsPost.query.filter(
			NewsPost.publish_date >= time_threshold
		).order_by(NewsPost.publish_date.desc()).all()

		return filtered_news
	except Exception as e:
		print(f"Error filtering news from DB: {e}")
		return []


def get_bad_comments_from_json(limit=20):
	"""–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–æ—Ö–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
	try:
		json_path = os.path.join(root_dir, 'bad_comments.json')

		if not os.path.exists(json_path):
			print("–§–∞–π–ª bad_comments.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
			return []

		with open(json_path, 'r', encoding='utf-8') as f:
			comments = json.load(f)

		# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
		comments.sort(key=lambda x: x.get('detection_date', ''), reverse=True)

		return comments[:limit]

	except Exception as e:
		print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞: {e}")
		return []


def save_bad_comment(comment_data):
	"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ JSON —Ñ–∞–π–ª, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
	try:
		bad_comments_path = os.path.join(root_dir, 'bad_comments.json')

		# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		if os.path.exists(bad_comments_path):
			with open(bad_comments_path, 'r', encoding='utf-8') as f:
				try:
					comments = json.load(f)
				except json.JSONDecodeError:
					comments = []
		else:
			comments = []

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
		comment_exists = any(
			comment['platform_comment_id'] == comment_data['platform_comment_id'] and
			comment['post_id'] == comment_data['post_id'] and
			comment['platform'] == comment_data['platform']
			for comment in comments
		)

		if not comment_exists:
			# –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
			comment_data['detection_date'] = datetime.now().isoformat()

			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
			comments.append(comment_data)

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			with open(bad_comments_path, 'w', encoding='utf-8') as f:
				json.dump(comments, f, ensure_ascii=False, indent=2)

			print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_data['platform_comment_id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ JSON")
			return True
		else:
			print(f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_data['platform_comment_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
			return False

	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ JSON: {e}")
		return False
def cleanup_old_bad_comments(days: int = 30):
	"""–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
	try:
		from datetime import datetime, timedelta

		file_path = 'bad_comments.json'
		if os.path.exists(file_path):
			with open(file_path, 'r', encoding='utf-8') as f:
				comments = json.load(f)

			# –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
			cutoff_date = datetime.now() - timedelta(days=days)
			filtered_comments = [
				c for c in comments
				if datetime.fromisoformat(c.get('detection_date', '2000-01-01')) >= cutoff_date
			]

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			with open(file_path, 'w', encoding='utf-8') as f:
				json.dump(filtered_comments, f, ensure_ascii=False, indent=2, default=str)

		return True
	except Exception as e:
		print(f"Error cleaning up bad comments: {e}")
		return False

def filter_news_by_time(hours: int):
	"""–§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
	try:
		with open('parsing_results.json', 'r', encoding='utf-8') as f:
			news_data = json.load(f)

		time_threshold = datetime.now() - timedelta(hours=hours)
		filtered_news = []

		for news_item in news_data:
			news_time = datetime.fromisoformat(news_item.get('publish', ''))
			if news_time >= time_threshold:
				filtered_news.append(news_item)

		return filtered_news
	except Exception as e:
		print(f"Error filtering news: {e}")
		return []


def split_long_message(message: str, max_length: int = 4000) -> List[str]:
	"""–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
	if len(message) <= max_length:
		return [message]

	parts = []
	while message:
		if len(message) <= max_length:
			parts.append(message)
			break

		# –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ç–æ—á–∫–µ
		split_index = max_length
		for delimiter in ['\n\n', '\n', '. ', ', ', ' ']:
			index = message.rfind(delimiter, 0, max_length)
			if index != -1:
				split_index = index + len(delimiter)
				break

		parts.append(message[:split_index])
		message = message[split_index:]

	return parts


def handle_update():
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
	try:
		# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
		app = create_app()

		with app.app_context():
			update = request.get_json()

			if not update:
				return jsonify({"status": "error", "message": "No JSON data"}), 400

			# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
			if 'message' in update:
				return _handle_message(update['message'])
			elif 'callback_query' in update:
				return _handle_callback(update['callback_query'])
			else:
				return jsonify({"status": "ok", "message": "Update type not supported"})

	except Exception as e:
		print(f"Error handling update: {e}")
		return jsonify({"status": "error", "message": str(e)}), 500


def _handle_message(message):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
	try:
		chat_id = message['chat']['id']
		text = message.get('text', '')

		print(f"üì® Received message from {chat_id}: {text}")

		# –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		if text.startswith('/'):
			return _handle_command(chat_id, text)
		else:
			return jsonify({"status": "ok", "message": "Message processed"})

	except Exception as e:
		print(f"Error handling message: {e}")
		return jsonify({"status": "error", "message": str(e)}), 500


def _handle_command(chat_id, command):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
	try:
		if command == '/start' or command == '/help':
			response = {
				"method": "sendMessage",
				"chat_id": chat_id,
				"text": "ü§ñ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç\n\n"
						"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
						"/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
						"/comments - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
						"/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
				"parse_mode": "HTML"
			}

		elif command == '/news':
			# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
			news = NewsPost.query.order_by(NewsPost.publish_date.desc()).limit(5).all()

			if news:
				text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
				for i, item in enumerate(news, 1):
					text += f"{i}. {item.text[:50]}...\n"
					text += f"   üìÖ {item.publish_date.strftime('%d.%m.%Y %H:%M')}\n"
					text += f"   üîó {item.url}\n\n"
			else:
				text = "üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"

			response = {
				"method": "sendMessage",
				"chat_id": chat_id,
				"text": text,
				"parse_mode": "HTML"
			}

		elif command == '/comments':
			# –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
			from .core import get_bad_comments_from_json
			comments = get_bad_comments_from_json(limit=5)

			if comments:
				text = "üö® –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
				for i, comment in enumerate(comments, 1):
					text += f"{i}. {comment.get('text', '')[:50]}...\n"
					text += f"   üë§ {comment.get('user_id', 'Unknown')}\n"
					text += f"   üìÖ {comment.get('publish_date', '')}\n\n"
			else:
				text = "‚úÖ –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"

			response = {
				"method": "sendMessage",
				"chat_id": chat_id,
				"text": text,
				"parse_mode": "HTML"
			}

		elif command == '/stats':
			# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
			news_count = NewsPost.query.count()
			comments_count = PostComment.query.count()
			sources_count = NewsSource.query.count()

			text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
			text += f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {news_count}\n"
			text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}\n"
			text += f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources_count}"

			response = {
				"method": "sendMessage",
				"chat_id": chat_id,
				"text": text,
				"parse_mode": "HTML"
			}

		else:
			response = {
				"method": "sendMessage",
				"chat_id": chat_id,
				"text": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
				"parse_mode": "HTML"
			}

		return jsonify(response)

	except Exception as e:
		print(f"Error handling command: {e}")
		error_response = {
			"method": "sendMessage",
			"chat_id": chat_id,
			"text": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
			"parse_mode": "HTML"
		}
		return jsonify(error_response)


def _handle_callback(callback_query):
	"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
	try:
		chat_id = callback_query['message']['chat']['id']
		data = callback_query['data']

		print(f"üîò Callback from {chat_id}: {data}")

		# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ callback –¥–µ–π—Å—Ç–≤–∏—è
		response = {
			"method": "answerCallbackQuery",
			"callback_query_id": callback_query['id'],
			"text": "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
		}

		return jsonify(response)

	except Exception as e:
		print(f"Error handling callback: {e}")
		return jsonify({"status": "error", "message": str(e)}), 500


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è webhook
def set_webhook(url):
	"""–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
	import requests
	from app.bot.main import BOT_TOKEN

	try:
		response = requests.post(
			f'https://api.telegram.org/bot{BOT_TOKEN}/setWebhook',
			json={'url': url}
		)
		return response.json()
	except Exception as e:
		return {'ok': False, 'error': str(e)}


def delete_webhook():
	"""–£–¥–∞–ª—è–µ—Ç webhook"""
	import requests
	from app.bot.main import BOT_TOKEN

	try:
		response = requests.post(
			f'https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook'
		)
		return response.json()
	except Exception as e:
		return {'ok': False, 'error': str(e)}