import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.abspath(os.path.join(current_dir, '..', '..'))
sys.path.append(root_dir)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from app import create_app


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()


async def parse_telegram_channels():
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
	try:
		from app.services.telegram_service import TelegramService

		service = TelegramService()
		results = await service.get_news(
			channels=['Dzerzhinsk_blackhole', 'tns_energo_nn'],
			keywords=['–¢–ù–° —ç–Ω–µ—Ä–≥–æ –ù–ù', '–¢–ù–° —ç–Ω–µ—Ä–≥–æ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–¢–ù–°',
					  '–≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', "–¢–ù–° –ù–∏–∂–Ω–∏–π"
		],
			days=5
		)

		return {'saved': len(results), 'details': results}

	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –ø–∞—Ä—Å–µ—Ä–∞: {e}")
		return {'saved': 0, 'error': str(e)}


async def parse_vk_groups():
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ VK –≥—Ä—É–ø–ø"""
	try:
		from app.services.vk_service import VKService

		# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π VK —Ç–æ–∫–µ–Ω
		vk_service = VKService(token='5746854757468547574685473b547eebd055746574685473fdcc76d76189e0967f0739b')

		results = await vk_service.parse_groups_sequentially()

		total_posts = 0
		for group_result in results.values():
			total_posts += len(group_result.get('posts', []))

		return {'saved': total_posts, 'details': results}

	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ VK –ø–∞—Ä—Å–µ—Ä–∞: {e}")
		return {'saved': 0, 'error': str(e)}


def parse_odnoklassniki():
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤"""
	try:
		from app.services.browser_parser import BrowserParser

		parser = BrowserParser()
		results = parser.parse_odnoklassniki_groups()

		return {'saved': results.get('saved', 0), 'details': results}

	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
		return {'saved': 0, 'error': str(e)}


def parse_web_sites():
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤"""
	try:
		from app.services.browser_parser import parse_news_sites

		print("\nüåê –ó–ê–ü–£–°–ö –í–ï–ë-–ü–ê–†–°–ï–†–ê (–ù–û–í–û–°–¢–ù–´–ï –°–ê–ô–¢–´)")
		print("-" * 50)

		results = parse_news_sites()

		total_posts = 0
		for url, posts in results.items():
			total_posts += len(posts)

		return {'saved': total_posts, 'details': results}

	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–∞—Ä—Å–µ—Ä–∞: {e}")
		return {'saved': 0, 'error': str(e)}


async def run_parsers_async():
	"""–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã"""
	print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ...")
	print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –ü–ê–†–°–ï–†–û–í")
	print("=" * 60)

	# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	with app.app_context():
		try:
			print("\nüì± –ó–ê–ü–£–°–ö TELEGRAM –ü–ê–†–°–ï–†–ê")
			print("-" * 40)
			telegram_results = await parse_telegram_channels()
			print(f"‚úÖ Telegram: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {telegram_results['saved']} –ø–æ—Å—Ç–æ–≤")

			print("\nüîµ –ó–ê–ü–£–°–ö VK –ü–ê–†–°–ï–†–ê")
			print("-" * 40)
			vk_results = await parse_vk_groups()
			print(f"‚úÖ VK: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {vk_results['saved']} –ø–æ—Å—Ç–æ–≤")

			print("\nüü† –ó–ê–ü–£–°–ö ODNOKLASSNIKI –ü–ê–†–°–ï–†–ê")
			print("-" * 40)
			ok_results = parse_odnoklassniki()
			print(f"‚úÖ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ok_results['saved']} –ø–æ—Å—Ç–æ–≤")

			print("\nüåê –ó–ê–ü–£–°–ö –í–ï–ë-–ü–ê–†–°–ï–†–ê (–ù–û–í–û–°–¢–ù–´–ï –°–ê–ô–¢–´)")
			print("-" * 50)
			web_results = parse_web_sites()
			print(f"‚úÖ –í–µ–±-—Å–∞–π—Ç—ã: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {web_results['saved']} –ø–æ—Å—Ç–æ–≤")

			# –°–≤–æ–¥–∫–∞
			print("\n" + "=" * 60)
			print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
			print(f"üì± Telegram: {telegram_results['saved']} –ø–æ—Å—Ç–æ–≤")
			print(f"üîµ VK: {vk_results['saved']} –ø–æ—Å—Ç–æ–≤")
			print(f"üü† –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {ok_results['saved']} –ø–æ—Å—Ç–æ–≤")
			print(f"üåê –í–µ–±-—Å–∞–π—Ç—ã: {web_results['saved']} –ø–æ—Å—Ç–æ–≤")
			total = (telegram_results['saved'] + vk_results['saved'] +
					 ok_results['saved'] + web_results['saved'])
			print(f"üìà –í—Å–µ–≥–æ: {total} –ø–æ—Å—Ç–æ–≤")
			print("=" * 60)

			return {
				'telegram': telegram_results,
				'vk': vk_results,
				'odnoklassniki': ok_results,
				'web': web_results,
				'total': total
			}

		except Exception as e:
			print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–æ–≤: {e}")
			import traceback
			traceback.print_exc()
			return {'error': str(e)}


def run_parsers():
	"""–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
	return asyncio.run(run_parsers_async())


if __name__ == "__main__":
	run_parsers()