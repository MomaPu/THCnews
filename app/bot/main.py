import sys
import telebot
from telebot import types
import os
from dotenv import load_dotenv
import threading
import time
from datetime import datetime, timedelta
import schedule

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.abspath(os.path.join(current_dir, '..', '..'))
sys.path.append(root_dir)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = os.path.join(root_dir, '.env')
if os.path.exists(env_path):
	load_dotenv(env_path)
	print(".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
	print("–û—à–∏–±–∫–∞: .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
	exit(1)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
try:
	from app import create_app, db
	from app.models.models import NewsPost, PostComment

	# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app = create_app()

	print("Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

except ImportError as e:
	print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
	exit(1)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
last_parser_run = None
parser_running = False


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.add(types.KeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"))
	keyboard.add(types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥"))
	keyboard.add(types.KeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"))
	keyboard.add(types.KeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è"))
	keyboard.add(types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"))
	keyboard.add(types.KeyboardButton("–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"))
	return keyboard


def get_time_selection_keyboard():
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.add(types.KeyboardButton("12 —á–∞—Å–æ–≤"))
	keyboard.add(types.KeyboardButton("24 —á–∞—Å–∞"))
	keyboard.add(types.KeyboardButton("36 —á–∞—Å–æ–≤"))
	keyboard.add(types.KeyboardButton("48 —á–∞—Å–æ–≤"))
	keyboard.add(types.KeyboardButton("60 —á–∞—Å–æ–≤"))
	keyboard.add(types.KeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"))
	keyboard.add(types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
	return keyboard


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def get_news_by_period(hours):
	"""–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
	with app.app_context():
		from app.bot.core import filter_news_by_time_db
		return filter_news_by_time_db(db, NewsPost, hours)


def get_bad_comments_db_wrapper(limit=20):
	"""–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–æ—Ö–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
	with app.app_context():
		from app.bot.core import get_bad_comments_from_json
		return get_bad_comments_from_json(limit)


def get_mention_comments_db(limit=20):
	"""–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å sentiment '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¢–ù–°' –∏–∑ –ë–î"""
	with app.app_context():
		result = db.session.execute(db.text("SELECT current_database()")).scalar()
		print(f"üìä Telegram Service –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ë–î: {result}")
		try:
			print("üîç –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å sentiment '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¢–ù–°' –≤ –ë–î...")
			db.session.expire_all()
			# –ü—Ä–æ–≤–µ—Ä–∏–º —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ sentiment'—ã
			all_sentiments = db.session.query(PostComment.sentiment).distinct().all()
			print(f"üìä –í—Å–µ sentiment'—ã –≤ –ë–î: {[s[0] for s in all_sentiments]}")

			comments = PostComment.query.filter(
				PostComment.sentiment == '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¢–ù–°'
			).order_by(PostComment.publish_date.desc()).limit(limit).all()

			print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¢–ù–°': {len(comments)}")

			# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
			result = []
			for comment in comments:
				result.append({
					'text': comment.text,
					'user_id': comment.platform_user_id,
					'publish_date': comment.publish_date.isoformat() if comment.publish_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
					'likes_count': comment.likes_count,
					'sentiment': comment.sentiment,
					'post_title': comment.post.text[
								  :100] + '...' if comment.post and comment.post.text else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
					'post_url': comment.post.url if comment.post else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
				})

			return result

		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤-—É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
			import traceback
			traceback.print_exc()
			return []

def show_mention_comments(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î
        mention_comments = get_mention_comments_db(limit=100)

        if mention_comments:
            response = "üîç –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"

            for i, comment in enumerate(mention_comments, 1):
                comment_text = f"{i}. {comment.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}\n"
                comment_text += f"üë§ {comment.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                comment_text += f"üìÖ {comment.get('publish_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                comment_text += f"üëç {comment.get('likes_count', 0)}\n"
                comment_text += f"üìù {comment.get('post_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
                comment_text += f"{comment.get('post_url', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"

                if len(response) + len(comment_text) > 4000:
                    bot.send_message(message.chat.id, response)
                    response = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"

                response += comment_text

            if response.strip():
                bot.send_message(message.chat.id, response)

        else:
            bot.send_message(message.chat.id, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤-—É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤-—É–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        print(f"Error: {e}")

def get_latest_news(limit=10):
	"""–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
	with app.app_context():
		return NewsPost.query.order_by(NewsPost.publish_date.desc()).limit(limit).all()


def run_master_parser():
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
	global parser_running, last_parser_run

	if parser_running:
		return "‚ùå –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"

	parser_running = True

	def parser_thread():
		global parser_running, last_parser_run

		try:
			print("üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä–∞...")

			# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
			from app.bot.master_parser import run_parsers

			results = run_parsers()
			last_parser_run = datetime.now()

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
			if ADMIN_ID:
				try:
					total = results.get('total', 0)
					message = f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É\n\n"
					message += f"üì± Telegram: {results.get('telegram', {}).get('saved', 0)} –ø–æ—Å—Ç–æ–≤\n"
					message += f"üîµ VK: {results.get('vk', {}).get('saved', 0)} –ø–æ—Å—Ç–æ–≤\n"
					message += f"üü† OK: {results.get('odnoklassniki', {}).get('saved', 0)} –ø–æ—Å—Ç–æ–≤\n"
					message += f"üåê –í–µ–±-—Å–∞–π—Ç—ã: {results.get('web', {}).get('saved', 0)} –ø–æ—Å—Ç–æ–≤\n"
					message += f"üìà –í—Å–µ–≥–æ: {total} –ø–æ—Å—Ç–æ–≤\n"
					message += f"‚è∞ –í—Ä–µ–º—è: {last_parser_run.strftime('%Y-%m-%d %H:%M:%S')}"

					bot.send_message(ADMIN_ID, message)
				except Exception as e:
					print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

			print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –ù–∞–π–¥–µ–Ω–æ {total} –ø–æ—Å—Ç–æ–≤")

		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ: {e}")
			if ADMIN_ID:
				try:
					bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {str(e)[:1000]}")
				except:
					pass
		finally:
			parser_running = False

	# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
	thread = threading.Thread(target=parser_thread)
	thread.daemon = True
	thread.start()

	return "‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–∑–∂–µ."


def schedule_daily_parser():
	"""–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""

	def daily_parser_job():
		if not parser_running:
			run_master_parser()
			print("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")

	# –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
	schedule.every().day.at("09:00").do(daily_parser_job)


	print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


def schedule_checker():
	"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
	while True:
		schedule.run_pending()
		time.sleep(60)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
	bot.reply_to(
		message,
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç!\n"
		"–í—ã –º–æ–∂–µ—Ç–µ:\n"
		"- –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
		"- –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
		"- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
		"- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
		"- –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –≤—Ä—É—á–Ω—É—é\n"
		"- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞",
		reply_markup=get_main_keyboard()
	)

@bot.message_handler(func=lambda message: message.text == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def handle_mention_comments(message):
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è'")
    show_mention_comments(message)

@bot.message_handler(commands=['run_parser'])
def run_parser_command(message):
	"""–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
	if str(message.chat.id) != ADMIN_ID:
		bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
		return

	result = run_master_parser()
	bot.reply_to(message, result)


@bot.message_handler(commands=['parser_status'])
def parser_status_command(message):
	"""–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"""
	status = get_parser_status()
	bot.reply_to(message, status)


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
def handle_latest_news(message):
	print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'")
	show_latest_news(message)


@bot.message_handler(func=lambda message: message.text == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
def handle_bad_comments(message):
	print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏'")
	show_bad_comments(message)


@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä")
def handle_run_parser(message):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
	if str(message.chat.id) != ADMIN_ID:
		bot.reply_to(message, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
		return

	result = run_master_parser()
	bot.reply_to(message, result)


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞")
def handle_parser_status(message):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
	status = get_parser_status()
	bot.reply_to(message, status)


@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥")
def select_period(message):
	bot.send_message(
		message.chat.id,
		"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:",
		reply_markup=get_time_selection_keyboard()
	)


@bot.message_handler(func=lambda message: message.text in ["12 —á–∞—Å–æ–≤", "24 —á–∞—Å–∞", "36 —á–∞—Å–æ–≤", "48 —á–∞—Å–æ–≤", "60 —á–∞—Å–æ–≤"])
def handle_period_selection(message):
	hours_map = {
		"12 —á–∞—Å–æ–≤": 12,
		"24 —á–∞—Å–∞": 24,
		"36 —á–∞—Å–æ–≤": 36,
		"48 —á–∞—Å–æ–≤": 48,
		"60 —á–∞—Å–æ–≤": 60
	}

	hours = hours_map[message.text]
	show_news_for_period(message, hours)


@bot.message_handler(func=lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def main_menu(message):
	bot.send_message(
		message.chat.id,
		"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
		reply_markup=get_main_keyboard()
	)


def get_parser_status():
	"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"""
	status = "üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞:\n\n"

	if parser_running:
		status += "üü° –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...\n"
	else:
		status += "üü¢ –ü–∞—Ä—Å–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω\n"

	if last_parser_run:
		status += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_parser_run.strftime('%Y-%m-%d %H:%M:%S')}\n"

		# –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
		time_diff = datetime.now() - last_parser_run
		hours_diff = time_diff.total_seconds() / 3600
		status += f"‚è≥ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {hours_diff:.1f} —á–∞—Å–æ–≤\n"
	else:
		status += "‚è∞ –ü–∞—Ä—Å–µ—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è\n"

	# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
	with app.app_context():
		news_count = NewsPost.query.count()
		comments_count = PostComment.query.count()

	status += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:\n"
	status += f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {news_count}\n"
	status += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}\n"

	return status


def show_news_for_period(message, hours):
	try:
		# –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
		filtered_news = get_news_by_period(hours)

		if filtered_news:
			response = f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n\n"
			for i, news in enumerate(filtered_news, 1):
				news_text = news.text if news.text else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
				news_preview = news_text[:100] + "..." if len(news_text) > 100 else news_text

				news_item = f"{i}. {news_preview}\n"
				news_item += f"üìÖ {news.publish_date}\n"
				news_item += f"üîó {news.url}\n\n"

				if len(response) + len(news_item) > 4000:
					bot.send_message(message.chat.id, response)
					response = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n\n"

				response += news_item

			if response.strip():
				bot.send_message(message.chat.id, response)
		else:
			bot.send_message(message.chat.id, f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

	except Exception as e:
		bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î.")
		print(f"Error: {e}")


def show_bad_comments(message):
	try:
		# –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Ö–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ JSON
		bad_comments = get_bad_comments_db_wrapper(limit=100)

		if bad_comments:
			response = "üö® –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"

			for i, comment in enumerate(bad_comments, 1):
				comment_text = f"{i}. {comment.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}\n"
				comment_text += f"üë§ {comment.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
				comment_text += f"üìÖ {comment.get('publish_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
				comment_text += f"üëç {comment.get('likes_count', 0)}\n"
				comment_text += f"üìù {comment.get('post_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
				comment_text += f"{comment.get('post_url', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"

				if len(response) + len(comment_text) > 4000:
					bot.send_message(message.chat.id, response)
					response = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n\n"

				response += comment_text

			if response.strip():
				bot.send_message(message.chat.id, response)

		else:
			bot.send_message(message.chat.id, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

	except Exception as e:
		bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ JSON.")
		print(f"Error: {e}")


def show_latest_news(message):
	try:
		# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
		latest_news = get_latest_news(limit=100)

		if latest_news:
			response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"

			for i, news in enumerate(latest_news, 1):
				news_text = news.text if news.text else "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
				news_preview = news_text[:100] + "..." if len(news_text) > 100 else news_text

				news_item = f"{i}. {news_preview}\n"
				news_item += f"üìÖ {news.publish_date}\n"
				news_item += f"üîó {news.url}\n\n"

				if len(response) + len(news_item) > 4000:
					bot.send_message(message.chat.id, response)
					response = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"

				response += news_item

			if response.strip():
				bot.send_message(message.chat.id, response)
		else:
			bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

	except Exception as e:
		bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
		print(f"Error: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
	print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
	schedule_daily_parser()

	# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
	scheduler_thread = threading.Thread(target=schedule_checker)
	scheduler_thread.daemon = True
	scheduler_thread.start()

	print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

	# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	bot.infinity_polling()