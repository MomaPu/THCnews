# telegram_service.py
import asyncio
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient
from telethon.sessions import StringSession

API_ID = 20304623
API_HASH = 'c1622024c0ad17c26fbd6b34f1d9ef1c'

class TelegramService:
    def __init__(self, session_string=None, file_session_name='user_session'):
        self.session_string = session_string
        if session_string:
            self.client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
        else:
            # –§–∞–π–ª–æ–≤–∞—è —Å–µ—Å—Å–∏—è (–±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ user_session.session)
            self.client = TelegramClient(file_session_name, API_ID, API_HASH)

    async def start_client(self):
        try:
            # .start() –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –µ—Å–ª–∏ session_string –≤–∞–ª–∏–¥–Ω–∞, –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await self.client.start()
            me = await self.client.get_me()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {me.first_name} (@{getattr(me, 'username', None)})")
            # –ï—Å–ª–∏ –º—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ —Ö–æ—Ç–∏–º —Å—Ç—Ä–æ–∫—É ‚Äî –º–æ–∂–Ω–æ –µ—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:
            if not self.session_string:
                try:
                    new_session_string = self.client.session.save()
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ StringSession, –Ω–æ save() —É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
                    print("üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤):")
                    print(new_session_string)
                    self.session_string = new_session_string
                except Exception:
                    # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–∏–º
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å StringSession –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (get_news, _get_comments, close) ...
    async def get_news(self, channels, keywords, days=3):
        success = await self.start_client()
        if not success:
            print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return []

        end_date = datetime.now(timezone.utc)
        start_date = end_date - timedelta(days=days)

        results = []
        for channel in channels:
            try:
                print(f"üì° –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {channel}...")
                entity = await self.client.get_entity(channel)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {getattr(entity, 'title', channel)}")

                async for message in self.client.iter_messages(entity, limit=100):
                    if message.date.replace(tzinfo=timezone.utc) < start_date:
                        break
                    if message.text and any(kw.lower() in message.text.lower() for kw in keywords):
                        comments = await self._get_comments(entity, message.id)
                        results.append({
                            'date': message.date.strftime('%Y-%m-%d %H:%M'),
                            'text': message.text,
                            'url': f"https://t.me/{channel}/{message.id}",
                            'comments': comments
                        })
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel}: {e}")
                continue

        return sorted(results, key=lambda x: x['date'], reverse=True)

    async def _get_comments(self, entity, post_id):
        comments = []
        try:
            async for comment in self.client.iter_messages(entity, reply_to=post_id, limit=3):
                if comment and comment.text:
                    comments.append({
                        'date': comment.date.strftime('%H:%M'),
                        'text': comment.text[:200]
                    })
        except Exception as e:
            print(f"üí¨ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {e}")
        return comments

    async def close(self):
        await self.client.disconnect()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
async def main():
    session_str = "1ApWapzMBu0w8dRJ4o4ABFnnckf-WPTDT8ZXaeZ4OHWpxt5HN4FYkgI_2zktBn6xvxyl3KhNTuwHoTH4dA-_eqGCGbglJom-MZPJcqSYTUEQ0oTevSOg-8ksYX2QmowqdL-BYZj6S2oQTwksLh8HaArfn0a01X0NZh0AUE-Ymwr_sMd7TxkIgKiDAceEBWJarMmwqVL--MkokTjebyWxBlr3hSNFmOEJfgB5j_y5VahDPt2SWqIZcn9TSrmybf_goABgSbnxReGLQrJQUe4iXNkXBRTFgwxU6lpYZJZiNKtW6nO9mvxnv_5_b-zYZwS0AXhtv6J-57c55DER_so2JbRsX3C8-04M="
    service = TelegramService(session_string=None)  # –∏–ª–∏ TelegramService(session_string=session_str)
    try:
        news = await service.get_news(
            channels=['tns_energo_nn'],
            keywords=['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–∞–≤–∞—Ä–∏—è', '–ø—Ä–æ–±–ª–µ–º', '—Å–≤—è–∑—å'],
            days=2
        )
        print(f"\nüìä –ò–¢–û–ì: –ù–∞–π–¥–µ–Ω–æ {len(news)} —Å–æ–æ–±—â–µ–Ω–∏–π:")
    finally:
        await service.close()

if __name__ == '__main__':
    asyncio.run(main())
